import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  setSelectedSkills, // action to set Selected skills redux - store
  removeSelectedSkill, // action to remove selected skills - redux store
  setSkills, //action to set skills generated by Ai - redux store
} from "../../redux/slices/SkillsSlice";
import Skill from "../../types/Skill"; //Type for Skill object
import { generateSkills } from "../../Ai/AiGeneratives"; //function to generate skills from AI
import { Input } from "@heroui/react"; // Next UI Input Component

const InputSkills = ({ jobRole }: { jobRole: string }) => {
  //fetch skills and selected skills from redux store
  const { skills, selectedSkills } = useSelector((state: any) => state.skills);

  // editmode state from redux store
  const editMode: boolean = useSelector((state: any) => state.editmode);

  // search query to generate skills related to user input
  const [searchQuery, setSearchQuery] = useState<any>("");
  //dispatch function to dispach redux actions
  const dispatch = useDispatch();
  //function to fetch skills from AI service based on job role
  const fetchAiSkills = async () => {
    try {
      //call generateSkills async fuction to generate skills
      const skills: Skill[] = await generateSkills(jobRole, searchQuery);
      dispatch(setSkills(skills)); // dispatch action setSkills to set fetched skills
    } catch (err) {
      console.log(err);
    }
  };

  // function to add skills without using ai suggested skills
  const addSkillManually = (e: React.KeyboardEvent<HTMLInputElement>) => {
    //get trimmed user input value
    const value = e.currentTarget.value.trim();
    if (value !== "" && e.key === "Enter") {
      // only add skills when not empty user input and if press enter
      // check the skill already in selected skills
      const skillExists = selectedSkills.some(
        (skill: Skill) => skill.skill.toLowerCase() === value.toLowerCase()
      );

      //if skill not exists dispatch action setSelectedskill to add skill to selected skills 
      // and clear user input
      if (!skillExists) {
        dispatch(setSelectedSkills({ skill: value }));
        setSearchQuery("");
      }
    }
  };
//useEffect  fetch skills when job role and search query not empty
  useEffect(() => {
    if (jobRole !== "" && searchQuery !== "") {
      fetchAiSkills();
    }
  }, [dispatch, searchQuery]); // re run effect when dispatch or searchqueary changes  dependency array

  return (
    <div className="">
      <div className="grid grid-cols-1 w-full relative">
  {/* Input field for searching and adding skills */}

        <Input
          label="Improved Skills"
          type="text"
          id="skills-input"
          className="skill-input"
          placeholder="Type Keywords"
          value={searchQuery}
          onKeyDown={addSkillManually}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
    {/* Show skills list when searchQuery is not empty */}

        {searchQuery ? (
          <ul className="shadow-xl bg-white w-full z-10 flex flex-col items-start overflow-y-auto max-h-40 absolute top-full left-0">
            {skills.map((skill: Skill, index: any) => (
              <li
                key={index}
                className="w-full cursor-pointer hover:bg-slate-100 hover:rounded"
              >
                <button
                  type="button"
                  className="font-medium text-left w-full p-1"
                  // when skill clicked dispatch action to add skill to selected skill
                  //clear the search queary
                  onClick={() => {
                    dispatch(setSelectedSkills(skill));
                    setSearchQuery("");
                  }}
                >
                  {skill.skill}
                </button>
              </li>
            ))}
          </ul>
        ) : (
          ""
        )}
    {/* show selected skills  */}
        <div className="selected-skills flex gap-2 mt-2">
          {selectedSkills.map((skill: Skill, index: number) => (
            <span
              hidden={editMode}
              className="selected-skill bg-slate-300 px-2 border rounded-md border-slate-400 font-medium text-sm"
              key={index}
            >
              {skill.skill}
              <button
                type="button"
                className="remove-skill p-1 rounded-full text-slate-600 "
                //when click remove button skill remove from selected skills
                onClick={() => dispatch(removeSelectedSkill(skill))}
              >
                x
              </button>
            </span>
          ))}
        </div>
      </div>
    </div>
  );
};

export default InputSkills;
